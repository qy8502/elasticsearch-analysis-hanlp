buildscript {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://snapshots.elastic.co/maven' }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.elasticsearch.gradle:build-tools:${elasticsearchVersion}"
    }
}
plugins {
    id 'java-gradle-plugin'
    id 'de.thetaphi.forbiddenapis' version '3.2'
}

group = 'org.elasticsearch'
version = "$elasticsearchVersion"
description = 'elasticsearch-analysis-hanlp'

apply plugin: 'java'
apply plugin: 'elasticsearch.esplugin'
apply plugin: 'checkstyle'
apply plugin: 'idea'

esplugin {
    name 'analysis-hanlp'
    description 'HanLP Analyzer for ElasticSearch'
    classname 'org.elasticsearch.plugin.analysis.hanlp.AnalysisHanLPPlugin'
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
}
java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    archiveBaseName.set(rootProject.name)
}

javadocJar {
    archiveBaseName.set(rootProject.name)
}

sourcesJar {
    archiveBaseName.set(rootProject.name)
}

assemble {
    doLast {
        file("build/distributions/analysis-hanlp-${elasticsearchVersion}.zip").renameTo(file("build/distributions/${rootProject.name}-${elasticsearchVersion}.zip"))
        ant.checksum file: "build/distributions/${rootProject.name}-${elasticsearchVersion}.zip"
    }
}

configurations.all() {
    Configuration configuration ->
        configuration.resolutionStrategy.failOnVersionConflict()
        configuration.resolutionStrategy.force(['commons-codec:commons-codec:1.15'])
        configuration.resolutionStrategy.force(['commons-logging:commons-logging:1.2'])
        configuration.resolutionStrategy.force(['org.apache.httpcomponents:httpclient:4.5.13'])
        configuration.resolutionStrategy.force(['org.apache.httpcomponents:httpcore:4.4.14'])
}

repositories {
    maven { url 'https://maven.aliyun.com/repository/public/' }
    maven { url 'https://snapshots.elastic.co/maven' }
    mavenCentral()
    jcenter()
}

dependencies {
    api 'com.hankcs:hanlp:portable-1.8.2'
    api 'commons-codec:commons-codec:1.15'
    api 'commons-logging:commons-logging:1.2'
    api 'org.apache.httpcomponents:httpclient:4.5.13'
    api 'org.apache.httpcomponents:httpcore:4.4.14'
}

checkstyle {
    sourceSets = [project.sourceSets.main]
}

checkstyleMain {
    excludes = ['**/PorterStemmer.java']
}

forbiddenApisMain {
    excludes = [
            '**/AnalysisHanLPPlugin.class',
            '**/PorterStemmer.class',
            '**/RemoteDictConfig.class',
            '**/DictionaryFileCache.class',
            '**/ExtMonitor.class',
            '**/model/*.class',
            '**/CoreStopWordDictionary.class'
    ]
}

//forbiddenPatterns {
//    forbiddenPatterns.enabled = false;
//}

//licenseHeaders {
//    licenseHeaders.enabled = false
//}

//dependencyLicenses {
//    dependencyLicenses.enabled = false
//}

//thirdPartyAudit {
//    thirdPartyAudit.enabled = false
//}

//validateNebulaPom {
//    validateNebulaPom.enabled = false
//}

//loggerUsageCheck {
//    loggerUsageCheck.enabled = false
//}

test {
    systemProperty 'tests.security.manager', 'false'
}

//testingConventions {
//    testingConventions.enabled = false
//}

javadoc {
    enabled = false
}